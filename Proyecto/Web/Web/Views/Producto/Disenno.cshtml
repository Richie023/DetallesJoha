@model Web.Entidades.Producto
@{
    ViewBag.Title = "Disenno";
    Layout = "~/Views/Shared/_LayoutExterno.cshtml";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/3.6.2/fabric.min.js">

</script>

<style>
    canvas {
        border: 4px solid #323232;
       -size: contain;
        background-repeat: no-repeat;
    }

    #canvas {
      //  background-image: url(' @ViewBag.urlImagen');

        background-color: transparent;
        background-size:contain;
    }

    input {
        margin: 8px 0;
    }
    /**********File Inputs**********/
    .container-input {
        text-align: center;
        background: #D10024;
        border-top: 5px solid #ffffff;
        padding: 10px 0;
        border-radius: 6px;
        width: 50%;
        margin: 0 auto;
        margin-bottom: 20px;
    }

    .inputfile {
        width: 0.1px;
        height: 0.1px;
        opacity: 0;
        overflow: hidden;
        position: absolute;
        z-index: -1;
    }

        .inputfile + label {
            max-width: 40%;
            font-size: 1.25rem;
            font-weight: 700;
            text-overflow: ellipsis;
            white-space: nowrap;
            cursor: pointer;
            display: inline-block;
            overflow: hidden;
            padding: 0.625rem 1.25rem;
        }

            .inputfile + label svg {
                width: 1em;
                height: 1em;
                vertical-align: middle;
                fill: currentColor;
                margin-top: -0.25em;
                margin-right: 0.25em;
            }

    .iborrainputfile {
        font-size: 16px;
        font-weight: normal;
        font-family: 'Lato';
    }
    .inputfile-5 + label {
        color: #fff;
    }




</style>
<div class="container-input">
    <input type="file" name="file-5" id="file-5" class="inputfile inputfile-5" data-multiple-caption="{count} archivos seleccionados" multiple />
    <label for="file-5">
        <figure>
            <svg xmlns="http://www.w3.org/2000/svg" class="iborrainputfile" width="20" height="17" viewBox="0 0 20 17"><path d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z"></path></svg>
        </figure>
        <span class="iborrainputfile">Seleccionar archivo</span>
    </label>
</div>


<h2>Diseno personalidado</h2>
<input accept="image/*" type="file" name="image" id="input" class="primary-btn" />


<div>

    <label for="text-input">Texto Personalizado:</label>
    <input type="text" id="text-input" />
    <button onclick="addText()" class="primary-btn">Agregar Texto</button>
</div>
<button class="fa fa-trash fa-2x" title="Limpiar" onclick="clearAll()">
    
</button>



<div>

    <canvas id="canvas" class="container-">
    </canvas>
    <a id="lnkDownload" href="">Guardar Imagen</a>
</div>






<p><img id="my-image" type="input" src="@ViewBag.urlImagen" width="50" height="50" ></p>


<h1>React</h1>

<!-- Reference it from HTML -->
<script src="@Url.Content("~/Scripts/HelloWorld.jsx")"></script>


<script src="https://cdn.jsdelivr.net/npm/fabric@latest/dist/index.min.js"></script>

<script src="~/Estilos/js/disenno.js"></script>

<script>
    function addText() {
        const text = document.getElementById('text-input').value;
        const textObject = new fabric.IText(text, { left: 50, top: 50, fontSize: 30 });
        canvas.add(textObject);
    }
</script>

<script>
    function clearAll() {
        if (window.confirm('Are you sure you want to clear all?')) {
            canvas.remove(...canvas.getObjects(IText));
        }
    }
    @*var fondo = document.getElementById('canvas')
    fondo.style.backgroundImage= " url(' @ViewBag.urlImagen')";


    window.onload= function () {
        // Obtener el elementos de dibujo Canvas
        let canvas = document.getElementById("canvas");
        let ctx = canvas.getContext("2d");
        // Obtenemos la imágen y la dibujamos 10 veces en puntos aleatoreos del Canvas
        let imagen = document.getElementById("mi_imagen");

        for (let i = 0; i < 1; i++) {
            let x =0;
            let y = 0;
            let width = 500;
            let height = 500;
            ctx.drawImage(imagen, x, y, width, height);
        }
    }*@

</script>



<script>

    input.onchange = (evnt) => {
        const file = evnt.target.files[0];

        const url = URL.createObjectURL(file);
        const imgNode = new Image();
        imgNode.src = url;
        imgNode.onload = () => {
            const img = new fabric.Image(imgNode, {

                top: 0,


            });

            canvas.add(img); // esta es la mágia
        };
    };




</script>

<script>


    function handleImage(e) {
        var objects = canvas.getObjects();
        for (var i in objects) {
            objects[i].remove();
        }
        var reader = new FileReader();
        reader.onload = function (event) {
            var img = new Image();
            img.onload = function () {
                var imgInstance = new fabric.Image(img, {
                    selectable: 1

                })
                canvas.add(imgInstance);
                canvas.deactivateAll().renderAll();
            }
            img.src = event.target.result;
        }
        reader.readAsDataURL(e.target.files[0]);
    }


</script>

<script>

    var imageSaver = document.getElementById('lnkDownload');
    imageSaver.addEventListener('click', saveImage, false);

    function saveImage(e) {
        this.href = canvas.toDataURL({
            SVGUseElement,
            format: 'png',
            quality: 0.8
        });
        this.download = 'canvas.png'
    }

</script>
<script>

    var Imagen = document.getElementById('my-image');

    var image = new fabric.Image(Imagen, {
         x :0,
        y: 0,
        selectable: false,
      innerWidth: 500,
     
      innerHeight:500,
       
    });
    canvas.add(image);


</script>